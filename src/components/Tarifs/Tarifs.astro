---
import Icon from "@components/Icons/Icon.astro";
import type { IconProps } from "@components/Icons/icon";
import TarifModal from "@components/Modals/TarifModal/TarifModal.astro";
import styles from "./tarifs.module.scss";

export interface Plan {
  slug: string;
  badge: string;
  icon?: IconProps["type"];
  subtitle?: string;
  price: string;
  footnote?: string;
  description?: string;
  moreInfoTitle?: string;
  moreInfoContent?: string;
}

export interface Option {
  id: string;
  label: string;
  description?: string;
  price: string;
  type?: "base" | "video" | "extra";
  defaultSelected?: boolean;
  disabled?: boolean;
  defaultQuantity?: number;
  minQuantity?: number;
  maxQuantity?: number;
  step?: number;
}

export interface ModalContent {
  title?: string;
  content?: string;
}

type OptionConstraintConfig = {
  min: number;
  max: number | null;
  step: number;
  quantity: number;
};

interface Props {
  defaultPlan: string;
  plans: Plan[];
  options: Option[];
  modal?: ModalContent;
}

const props = Astro.props as Props;

const planEntries = props.plans ?? [];
const planMap = new Map(planEntries.map((plan) => [plan.slug, plan]));
const resolvedDefaultPlan = planMap.has(props.defaultPlan)
  ? props.defaultPlan
  : (planEntries[0]?.slug ?? "");

const baseOptionIds = props.options
  .filter((opt) => (opt.type ?? "extra") === "base")
  .map((opt) => opt.id);

const videoOptionIds = props.options
  .filter((opt) => (opt.type ?? "extra") === "video")
  .map((opt) => opt.id);

const optionConstraints = Object.fromEntries(
  props.options.map((opt) => {
    const min = opt.minQuantity ?? 0;
    const max =
      typeof opt.maxQuantity === "number" && Number.isFinite(opt.maxQuantity)
        ? opt.maxQuantity
        : null;
    const step = opt.step && opt.step > 0 ? opt.step : 1;
    let quantity =
      typeof opt.defaultQuantity === "number"
        ? opt.defaultQuantity
        : opt.defaultSelected
          ? 1
          : 0;
    quantity = Math.max(quantity, min);
    if (typeof max === "number") {
      quantity = Math.min(quantity, max);
    }
    const config: OptionConstraintConfig = { min, max, step, quantity };
    return [opt.id, config];
  })
) as Record<string, OptionConstraintConfig>;

const optionQuantities = Object.fromEntries(
  Object.entries(optionConstraints).map(([id, constraint]) => [
    id,
    constraint.quantity,
  ])
);

const componentId = `tarifs-${Math.random().toString(36).slice(2, 10)}`;
const modalId = `${componentId}-modal`;
const configPayload = encodeURIComponent(
  JSON.stringify({
    defaultPlan: resolvedDefaultPlan,
    baseOptionIds,
    videoOptionIds,
    optionQuantities,
    optionConstraints: Object.fromEntries(
      Object.entries(optionConstraints).map(([id, constraint]) => [
        id,
        {
          min: constraint.min,
          max: constraint.max,
          step: constraint.step,
        },
      ])
    ),
    plans: planEntries.map((plan) => ({
      slug: plan.slug,
      moreInfoTitle: plan.moreInfoTitle ?? null,
      moreInfoContent: plan.moreInfoContent ?? null,
    })),
    modal: props.modal ?? null,
  })
);

const hasModal = Boolean(
  props.modal || planEntries.some((plan) => plan.moreInfoContent)
);
---

<section
  id={componentId}
  class={`${styles.tarifs} section-container`}
  data-tarifs-root
  data-config={configPayload}
  data-modal-id={hasModal ? modalId : undefined}
>
  <div class={styles.shell}>
    <div class={styles.planDecor}>
      <div class={styles.planDeck}>
        {
          planEntries.map((plan) => (
            <article
              class={styles.planCard}
              data-plan-card
              data-plan-slug={plan.slug}
              data-active={plan.slug === resolvedDefaultPlan ? "true" : "false"}
            >
              <div class={styles.planBadge}>
                {plan.icon && (
                  <span class={styles.planIcon}>
                    <Icon type={plan.icon} size={64} />
                  </span>
                )}
              </div>
              {plan.subtitle && (
                <p class={styles.planSubtitle}>{plan.subtitle}</p>
              )}
              <p class={styles.planPrice}>{plan.price}</p>
              {plan.footnote && (
                <p class={styles.planFootnote}>{plan.footnote}</p>
              )}
              {plan.description && (
                <p class={styles.planDescription}>{plan.description}</p>
              )}
            </article>
          ))
        }
      </div>
    </div>

    <div class={styles.optionsBlock}>
      <h3 class={styles.optionsTitle}>Options disponibles</h3>
      <div class={styles.optionStack}>
        {
          props.options.map((option) => {
            const optionType = option.type ?? "extra";
            const disabled = option.disabled ?? false;
            const constraint = optionConstraints[option.id] ?? {
              min: 0,
              max: null,
              step: 1,
              quantity: 0,
            };
            const quantity = constraint.quantity;
            const selected = quantity > 0;
            return (
              <div
                class={styles.optionCard}
                data-option-card
                data-option-id={option.id}
                data-option-type={optionType}
                data-selected={selected ? "true" : "false"}
                data-disabled={disabled ? "true" : "false"}
                data-quantity={quantity}
                data-min={constraint.min}
                data-max={
                  typeof constraint.max === "number"
                    ? constraint.max
                    : undefined
                }
                data-step={constraint.step}
              >
                <div class={styles.optionToggle} data-option-counter>
                  <button
                    type="button"
                    class={`${styles.optionButton} ${styles.optionToggleMinus}`}
                    data-option-decrement
                    aria-label={`Réduire la quantité pour ${option.label}`}
                    disabled={disabled || quantity <= constraint.min}
                  >
                    −
                  </button>
                  <span
                    aria-live="polite"
                    class={styles.optionToggleValue}
                    data-option-value
                  >
                    {quantity}
                  </span>
                  <button
                    type="button"
                    class={`${styles.optionButton} ${styles.optionTogglePlus}`}
                    data-option-increment
                    aria-label={`Augmenter la quantité pour ${option.label}`}
                    disabled={
                      disabled ||
                      (typeof constraint.max === "number" &&
                        quantity >= constraint.max)
                    }
                  >
                    +
                  </button>
                </div>
                <div class={styles.optionDetails}>
                  <span class={styles.optionPrice}>{option.price}</span>
                  <span class={styles.optionLabel}>{option.label}</span>
                  {option.description && (
                    <p class={styles.optionDescription}>{option.description}</p>
                  )}
                </div>
              </div>
            );
          })
        }
      </div>
    </div>
  </div>

  <div class={styles.actions}>
    <a class={styles.ctaPrimary} href="/devis">Demander un devis</a>
    {
      hasModal && (
        <button
          type="button"
          class={styles.ctaSecondary}
          data-tarif-modal-trigger
        >
          {props.modal?.title ?? "Plus d'informations"}
        </button>
      )
    }
  </div>

  {
    hasModal && (
      <TarifModal
        id={modalId}
        fallbackTitle={props.modal?.title ?? "Plus d'informations"}
        fallbackContent={props.modal?.content}
      />
    )
  }
</section>

<script src="../Modals/TarifModal/tarifModal.client.ts"></script>
