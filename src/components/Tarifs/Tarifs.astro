---
import Icon from "@components/Icons/Icon.astro";
import TarifModal from "@components/Modals/TarifModal/TarifModal.astro";
import modalStyles from "@components/Modals/TarifModal/tarifModal.module.scss";
import { replaceScopedClasses } from "@lib/htmlUtils";
import type {
  ModalContent,
  Option,
  OptionConstraint,
  Plan,
  PlanConfig,
  TarifClientConfig,
  TarifsSectionProps,
} from "@types/tarifs";
import styles from "./tarifs.module.scss";

type OptionConstraintConfig = OptionConstraint & {
  quantity: number;
};

const props = Astro.props as TarifsSectionProps;

const planEntries = props.plans ?? [];
const planMap = new Map(planEntries.map((plan) => [plan.slug, plan]));
const resolvedDefaultPlan = planMap.has(props.defaultPlan)
  ? props.defaultPlan
  : (planEntries[0]?.slug ?? "");

const baseOptionIds = props.options
  .filter((opt) => (opt.type ?? "extra") === "base")
  .map((opt) => opt.id);

const videoOptionIds = props.options
  .filter((opt) => (opt.type ?? "extra") === "video")
  .map((opt) => opt.id);

const optionConstraints = Object.fromEntries(
  props.options.map((opt) => {
    const min = opt.minQuantity ?? 0;
    const max =
      typeof opt.maxQuantity === "number" && Number.isFinite(opt.maxQuantity)
        ? opt.maxQuantity
        : null;
    const step = opt.step && opt.step > 0 ? opt.step : 1;
    let quantity =
      typeof opt.defaultQuantity === "number"
        ? opt.defaultQuantity
        : opt.defaultSelected
          ? 1
          : 0;
    quantity = Math.max(quantity, min);
    if (typeof max === "number") {
      quantity = Math.min(quantity, max);
    }
    const config: OptionConstraintConfig = { min, max, step, quantity };
    return [opt.id, config];
  })
) as Record<string, OptionConstraintConfig>;

const optionQuantities = Object.fromEntries(
  Object.entries(optionConstraints).map(([id, constraint]) => [
    id,
    constraint.quantity,
  ])
);

const componentId = `tarifs-${Math.random().toString(36).slice(2, 10)}`;
const modalId = `${componentId}-modal`;

const defaultPlanEntry = planMap.get(resolvedDefaultPlan);
const defaultPlanIcon = defaultPlanEntry?.icon ?? null;
const defaultPlanBadge = defaultPlanEntry?.badge ?? null;

const modalSharedContent =
  replaceScopedClasses(props.modal?.content ?? "", modalStyles) ?? "";
const initialPlanDetailContent =
  replaceScopedClasses(defaultPlanEntry?.moreInfoContent ?? "", modalStyles) ??
  "";

const clientConfig: TarifClientConfig = {
  defaultPlan: resolvedDefaultPlan,
  baseOptionIds,
  videoOptionIds,
  optionQuantities,
  optionConstraints: Object.fromEntries(
    Object.entries(optionConstraints).map(([id, constraint]) => [
      id,
      {
        min: constraint.min,
        max: constraint.max,
        step: constraint.step,
      },
    ]),
  ),
  plans: planEntries.map<PlanConfig>((plan) => ({
    slug: plan.slug,
    badge: plan.badge ?? null,
    moreInfoTitle: plan.moreInfoTitle ?? null,
    moreInfoContent:
      replaceScopedClasses(plan.moreInfoContent ?? null, modalStyles) ?? null,
  })),
  modal: props.modal ?? null,
};

const configPayload = encodeURIComponent(JSON.stringify(clientConfig));

const hasModal = Boolean(
  props.modal || planEntries.some((plan) => plan.moreInfoContent)
);
---

<section
  id={componentId}
  class={`${styles.tarifs} section-container`}
  data-tarifs-root
  data-config={configPayload}
  data-modal-id={hasModal ? modalId : undefined}
>
  <div class={styles.shell}>
    <div class={styles.planDecor}>
      <div class={styles.planDeck}>
        {
          planEntries.map((plan) => (
            <article
              class={styles.planCard}
              data-plan-card
              data-plan-slug={plan.slug}
              data-active={plan.slug === resolvedDefaultPlan ? "true" : "false"}
            >
              <div class={styles.planBadge}>
                {plan.icon && (
                  <span class={styles.planIcon} data-plan-icon>
                    <Icon type={plan.icon} size={64} />
                  </span>
                )}
                {plan.badge && (
                  <span class={styles.planBadgeText}>{plan.badge}</span>
                )}
              </div>
              {plan.subtitle && (
                <p class={styles.planSubtitle}>{plan.subtitle}</p>
              )}
              <p class={styles.planPrice}>{plan.price}</p>
              {plan.footnote && (
                <p class={styles.planFootnote}>{plan.footnote}</p>
              )}
              {plan.description && (
                <p class={styles.planDescription}>{plan.description}</p>
              )}
            </article>
          ))
        }
      </div>
    </div>

    <div class={styles.optionsBlock}>
      <h3 class={styles.optionsTitle}>Options disponibles</h3>
      <div class={styles.optionStack}>
        {
          props.options.map((option) => {
            const optionType = option.type ?? "extra";
            const disabled = option.disabled ?? false;
            const showCounter = option.showCounter ?? true;
            const constraint = optionConstraints[option.id] ?? {
              min: 0,
              max: null,
              step: 1,
              quantity: 0,
            };
            const quantity = constraint.quantity;
            const selected = quantity > 0;
            const unitPrice =
              typeof option.unitPrice === "number" ? option.unitPrice : null;
            const priceSuffix = option.priceSuffix ?? "";
            const priceFallback = option.price;
            let dynamicPrice = priceFallback;
            if (unitPrice !== null) {
              dynamicPrice =
                quantity > 0
                  ? `${unitPrice * quantity}${priceSuffix}`
                  : priceSuffix
                    ? `0${priceSuffix}`
                    : priceFallback;
            }
            return (
              <div
                class={styles.optionCard}
                data-option-card
                data-option-id={option.id}
                data-option-type={optionType}
                data-selected={selected ? "true" : "false"}
                data-disabled={disabled ? "true" : "false"}
                data-quantity={quantity}
                data-min={constraint.min}
                data-max={
                  typeof constraint.max === "number"
                    ? constraint.max
                    : undefined
                }
                data-step={constraint.step}
                data-counter-enabled={showCounter ? "true" : "false"}
              >
                {showCounter && (
                  <div class={styles.optionToggle} data-option-counter>
                    <button
                      type="button"
                      class={`${styles.optionButton} ${styles.optionToggleMinus}`}
                      data-option-decrement
                      aria-label={`Réduire la quantité pour ${option.label}`}
                      disabled={disabled || quantity <= constraint.min}
                    >
                      −
                    </button>
                    <span
                      aria-live="polite"
                      class={styles.optionToggleValue}
                      data-option-value
                    >
                      {quantity}
                    </span>
                    <button
                      type="button"
                      class={`${styles.optionButton} ${styles.optionTogglePlus}`}
                      data-option-increment
                      aria-label={`Augmenter la quantité pour ${option.label}`}
                      disabled={
                        disabled ||
                        (typeof constraint.max === "number" &&
                          quantity >= constraint.max)
                      }
                    >
                      +
                    </button>
                  </div>
                )}
                <div class={styles.optionDetails}>
                  <span
                    class={styles.optionPrice}
                    data-option-price
                    data-unit-price={unitPrice !== null ? unitPrice : undefined}
                    data-price-suffix={priceSuffix || undefined}
                    data-price-fallback={priceFallback}
                  >
                    {dynamicPrice}
                  </span>
                  <span class={styles.optionLabel}>{option.label}</span>
                  {option.description && (
                    <p class={styles.optionDescription}>{option.description}</p>
                  )}
                </div>
              </div>
            );
          })
        }
      </div>
    </div>
  </div>

  <div class={styles.actions}>
    <a
      class={styles.ctaPrimary}
      href="/contact"
      data-tarifs-contact
      data-base-href="/contact"
    >
      Demander un devis
    </a>
    {
      hasModal && (
        <button
          type="button"
          class={styles.ctaSecondary}
          data-tarif-modal-trigger
        >
          {props.modal?.title ?? "Plus d'informations"}
        </button>
      )
    }
  </div>

  {
    hasModal && (
      <TarifModal
        id={modalId}
        fallbackTitle={props.modal?.title ?? "Plus d'informations"}
        fallbackContent={modalSharedContent}
        defaultPlan={resolvedDefaultPlan}
        initialContent={initialPlanDetailContent}
        defaultIcon={defaultPlanIcon ?? undefined}
        defaultBadge={defaultPlanBadge ?? undefined}
      />
    )
  }
</section>

<script src="./tarifs.client.ts"></script>
