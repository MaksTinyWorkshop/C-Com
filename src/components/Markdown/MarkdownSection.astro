---
import type { CollectionEntry } from "astro:content";
import { resolveUrl } from "@lib/urlHelpers";
import MarkdownImage from "./MarkdownImage.astro";
import styles from "./markdownSection.module.scss";
import type { MarkdownSectionProps } from "@app-types/markdown";

type MarkdownRender = Awaited<
  ReturnType<CollectionEntry<"sections">["render"]>
>;

const {
  title,
  description,
  images,
  variant = "",
  Content,
} = Astro.props as MarkdownSectionProps<MarkdownRender["Content"]>;

const sectionClass = [
  "section-container",
  styles.markdown,
  variant ? (styles[`markdown--${variant}`] ?? "") : "",
]
  .filter(Boolean)
  .join(" ");

const resolvedImages = images?.map((image) => ({
  ...image,
  src: resolveUrl(image.src),
}));

---

<section class={sectionClass}>
  {
    resolvedImages && resolvedImages.length > 0 && (
      <div class={styles.imageGallery ?? "image-gallery"}>
        {resolvedImages.map((image) => (
          <figure>
            <img src={image.src} alt={image.alt ?? ""} />
            {image.caption && <figcaption>{image.caption}</figcaption>}
          </figure>
        ))}
      </div>
    )
  }
  {title && <h2>{title}</h2>}

  <div class={styles.prose}>
    <Content
      components={{
        img: MarkdownImage,
      }}
    />
  </div>
</section>
