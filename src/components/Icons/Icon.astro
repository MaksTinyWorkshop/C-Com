---
import type { IconProps } from "./icon";
import iconMap from "./map";

interface Props extends IconProps {}

const { type, size = 24, color, theme, iconSet } = Astro.props;

const icons = {
  ...iconMap,
  ...(iconSet || {}),
};

const svg = icons[type as keyof typeof iconMap];

if (!svg) {
  console.error("Cannot find icon type:", type);
}

const ensureAttribute = (content: string, attr: string, value: string) => {
  const regex = new RegExp(`${attr}="[^"]*"`, "i");
  if (regex.test(content)) {
    return content.replace(regex, `${attr}="${value}"`);
  }
  return content.replace("<svg", `<svg ${attr}="${value}"`);
};

let icon = svg ? String(svg) : "";

if (icon) {
  icon = ensureAttribute(icon, "width", String(size));
  icon = ensureAttribute(icon, "height", String(size));

  const targetColor = color ?? (theme ? `var(--w-color-${theme})` : null);

  if (targetColor) {
    icon = icon.replace(
      /(fill|stroke)="(?!none)[^"]*"/gi,
      (_match, attr: string) => `${attr}="${targetColor}"`,
    );

    if (!/(fill|stroke)="(?!none)/i.test(icon)) {
      icon = ensureAttribute(icon, "fill", targetColor);
    }
  }
}
---

<Fragment set:html={icon} />
